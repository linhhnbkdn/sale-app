[project]
name = "backend"
version = "0.1.0"
description = "Django backend for web-sale project"
requires-python = ">=3.11"
dependencies = [
    "django==5.2.5",
    "dependency-injector",
    "djangorestframework==3.15.2",
    "djangorestframework-simplejwt[crypto]==5.3.0",
    "django-cors-headers==4.4.0",
    "drf-spectacular==0.27.2",
    "setuptools",
]

[project.optional-dependencies]
dev = [
    "ruff",
    "coverage[toml]==7.6.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E", "F", "W", "I", "N", "UP", "B", "A", "C4", "DJ"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
]

line-length = 88
target-version = "py311"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
known-django = ["django"]
section-order = ["future", "standard-library", "third-party", "django", "first-party", "local-folder"]

[tool.ruff.lint.isort.sections]
"django" = ["django"]

[tool.coverage.run]
source = ["."]
omit = [
    "*/migrations/*",
    "*/venv/*",
    "*/virtualenv/*",
    "*/.venv/*",
    "*/tests/*",
    "*/test_*.py",
    "manage.py",
    "backend/settings.py",
    "backend/wsgi.py",
    "backend/asgi.py",
    "backend/urls.py",
    "backend/__init__.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class.*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2
fail_under = 95.0

[tool.coverage.html]
directory = "htmlcov"